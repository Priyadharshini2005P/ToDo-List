<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My To-Do List (All-in-One)</title>

    <style>
        /* General Body Styling */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* A modern font */
            background-color: #f0f2f5; /* Light grey background */
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            margin: 0;
            padding: 50px 20px; /* Padding for top and sides */
            box-sizing: border-box;
        }

        .container {
            background-color: #ffffff;
            padding: 35px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); /* Stronger shadow */
            width: 100%;
            max-width: 550px; /* Slightly wider */
            text-align: center;
            border: 1px solid #e0e0e0; /* Subtle border */
        }

        h1 {
            color: #2c3e50; /* Darker heading color */
            margin-bottom: 30px;
            font-size: 2.8em;
            font-weight: 700; /* Bolder */
            letter-spacing: -0.5px;
        }

        /* Input Section Styling */
        .input-section {
            display: flex;
            gap: 12px; /* Increased gap */
            margin-bottom: 30px;
        }

        #taskInput {
            flex-grow: 1;
            padding: 14px 18px;
            border: 2px solid #ced4da; /* Muted border */
            border-radius: 8px;
            font-size: 1.1em;
            outline: none;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        #taskInput:focus {
            border-color: #007bff; /* Blue border on focus */
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25); /* Focus shadow */
        }

        #addTaskBtn {
            background-color: #007bff; /* Blue button */
            color: white;
            border: none;
            padding: 14px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1em;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.1s ease;
        }

        #addTaskBtn:hover {
            background-color: #0056b3; /* Darker blue on hover */
            transform: translateY(-2px);
        }

        #addTaskBtn:active {
            transform: translateY(0);
        }

        /* Task List Styling */
        #taskList {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .todo-item {
            background-color: #f8f9fa; /* Lighter background for items */
            border: 1px solid #e9ecef;
            padding: 18px;
            margin-bottom: 12px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1.15em;
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
            word-break: break-word;
        }

        .todo-item:hover {
            background-color: #e2e6ea; /* Slightly darker on hover */
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        }

        /* Styling for completed tasks */
        .todo-item.completed {
            background-color: #d4edda; /* Light green for completed tasks */
            text-decoration: line-through;
            color: #6c757d; /* Muted text color */
            border-color: #c3e6cb;
        }

        .todo-item.completed .task-text {
             color: #6c757d; /* Ensure task-text also dims */
        }


        /* Task text clickability (for marking complete/incomplete) */
        .task-text {
            flex-grow: 1;
            text-align: left;
            cursor: pointer;
            padding-right: 15px;
        }

        /* Delete Button Styling */
        .delete-btn {
            background-color: #dc3545; /* Red delete button */
            color: white;
            border: none;
            padding: 9px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.95em;
            font-weight: 500;
            transition: background-color 0.3s ease, transform 0.1s ease;
            margin-left: 15px;
        }

        .delete-btn:hover {
            background-color: #c82333; /* Darker red on hover */
            transform: scale(1.08);
        }

        .delete-btn:active {
            transform: scale(1);
        }

        /* Responsive adjustments */
        @media (max-width: 600px) {
            body {
                padding: 30px 15px;
            }
            .container {
                padding: 25px;
                border-radius: 8px;
            }
            h1 {
                font-size: 2.2em;
                margin-bottom: 25px;
            }
            .input-section {
                flex-direction: column;
                gap: 10px;
            }
            #addTaskBtn {
                width: 100%;
                padding: 12px;
                font-size: 1em;
            }
            #taskInput {
                padding: 12px 15px;
                font-size: 1em;
            }
            .todo-item {
                flex-direction: column; /* Stack text and button */
                align-items: flex-start;
                padding: 15px;
                font-size: 1em;
            }
            .task-text {
                padding-right: 0;
                margin-bottom: 10px; /* Space between text and button */
                width: 100%; /* Take full width */
            }
            .delete-btn {
                margin-left: 0;
                width: 100%; /* Make button full width */
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>My To-Do List</h1>

        <div class="input-section">
            <input type="text" id="taskInput" placeholder="Add a new task...">
            <button id="addTaskBtn">Add Task</button>
        </div>

        <ul id="taskList">
            </ul>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const taskInput = document.getElementById('taskInput');
            const addTaskBtn = document.getElementById('addTaskBtn');
            const taskList = document.getElementById('taskList');

            // Load tasks from local storage when the page loads
            loadTasks();

            // Add task when button is clicked
            addTaskBtn.addEventListener('click', addTask);

            // Add task when 'Enter' key is pressed in the input field
            taskInput.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') {
                    addTask();
                }
            });

            // Function to add a new task
            function addTask() {
                const taskText = taskInput.value.trim(); // Get value and remove leading/trailing whitespace

                if (taskText === "") {
                    alert("Please enter a task!");
                    return; // Stop if input is empty
                }

                createTaskElement(taskText, false); // Create task element, initially not completed
                saveTasks(); // Save tasks to local storage
                taskInput.value = ''; // Clear the input field
            }

            // Function to create a task list item element
            function createTaskElement(taskText, isCompleted) {
                const listItem = document.createElement('li');
                listItem.classList.add('todo-item');
                if (isCompleted) {
                    listItem.classList.add('completed');
                }

                const taskSpan = document.createElement('span');
                taskSpan.classList.add('task-text');
                taskSpan.textContent = taskText;

                // Toggle 'completed' class on task text click
                taskSpan.addEventListener('click', () => {
                    listItem.classList.toggle('completed');
                    saveTasks(); // Save after toggling completion
                });

                const deleteBtn = document.createElement('button');
                deleteBtn.classList.add('delete-btn');
                deleteBtn.textContent = 'Delete';

                // Delete task on button click
                deleteBtn.addEventListener('click', () => {
                    taskList.removeChild(listItem);
                    saveTasks(); // Save after deleting
                });

                listItem.appendChild(taskSpan);
                listItem.appendChild(deleteBtn);
                taskList.appendChild(listItem);
            }

            // Function to save tasks to Local Storage
            function saveTasks() {
                const tasks = [];
                taskList.querySelectorAll('.todo-item').forEach(item => {
                    tasks.push({
                        text: item.querySelector('.task-text').textContent,
                        completed: item.classList.contains('completed')
                    });
                });
                localStorage.setItem('todoListTasks', JSON.stringify(tasks));
            }

            // Function to load tasks from Local Storage
            function loadTasks() {
                const storedTasks = localStorage.getItem('todoListTasks');
                if (storedTasks) {
                    const tasks = JSON.parse(storedTasks);
                    tasks.forEach(task => {
                        createTaskElement(task.text, task.completed);
                    });
                }
            }
        });
    </script>
</body>
</html>
